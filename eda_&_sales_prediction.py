# -*- coding: utf-8 -*-
"""EDA & Sales Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UXRhQOrJuPntXer5AbqLGFXwvBrgbggj

# **Exploratory Data Analysis On Retail Sales Data**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**1. Loading and Cleanig Data**"""

#Data loading
sd = pd.read_csv('/content/retail_sales_dataset.csv')

#preview the data
sd.head()
sd.info()

#cleaning data
sd.dropna(inplace  = True)

"""**2. Descriptive statistics**"""

#basic stats
print(sd.describe())

#mode for each column
print(sd.mode().iloc[0])

"""**3.Time Series Analysis**"""

sd.head()

#covert datetime
sd['Date']= pd.to_datetime(sd['Date'])

#aggregate sales over time
sales_trends = sd.groupby('Date')['Total Amount'].sum().reset_index()
print(sales_trends)

# Plot
plt.plot(sales_trends['Date'],sales_trends['Total Amount'])
plt.xlabel('Date')
plt.ylabel('Total Amount')
plt.title('Sales Trends Over Time')

"""**4. Customer and Product Analysis**"""

#demographics
customer_demographics = sd.groupby('Age')['Total Amount'].sum().reset_index()
print(customer_demographics)

plt.plot(customer_demographics['Age'],customer_demographics['Total Amount'])
plt.title('customer_demographics')
plt.xlabel('Age')
plt.ylabel('Total Amount')
plt.show

# Average purchase by age
sd.groupby('Age')['Total Amount'].sum().plot(kind='line')

# Top 10 products by sales
Product_by_sales = sd.groupby('Product Category')['Total Amount'].sum().nlargest(10).reset_index()
plt.plot(Product_by_sales['Product Category'],Product_by_sales['Total Amount'])
plt.title('Top 10 products by sales')
plt.xlabel('Product Category')
plt.ylabel('Total Amount')
plt.plot(kind ='bar', colour ='purple')

"""**5. Visualization: Bar Charts, Line Plots, Heatmaps***






"""

#lineplot
plt.figure(figsize=(12,6))
sns.lineplot(x='Product Category', y = 'Quantity', data = sd)
plt.title('Total Sales by Product Category', fontsize = 16)
plt.xlabel('Product Category')
plt.ylabel('Quantity')

#barplot
# Group by Product Category and sum the Total Amount
category_sales = sd.groupby('Product Category')['Total Amount'].sum().reset_index()

# Sort categories for better visualization (optional)
category_sales = category_sales.sort_values(by='Total Amount', ascending=False)

# Plot
plt.figure(figsize=(10, 6))
sns.barplot(x='Product Category', y='Total Amount', data=category_sales, palette='viridis')
plt.title('Total Sales by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Total Sales Amount')
plt.show()

# 1. Convert the date column to datetime (if not already)
sd['Date'] = pd.to_datetime(sd['Date'])

# 2. Create a 'month' column in 'YYYY-MM' format
sd['month'] = sd['Date'].dt.to_period('M').astype(str)

# 3. Now build the pivot and plot
pivot = sd.pivot_table(index='month', columns='Product Category', values='Total Amount', aggfunc='sum')

# 4. Plot the pivot
pivot.plot(figsize=(14, 6), marker='o')
plt.title("Monthly Sales by Category")
plt.xlabel("Month")
plt.ylabel("Total Sales Amount")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.legend(title="Product Category")
plt.show()

#Compute the correlation matrix
corr_matrix = sd.corr(numeric_only=True)

# Step 5: Plot the heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

"""## **Sales Prediction**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import mean_squared_error, r2_score

# Feature selection
features = ['Gender', 'Age', 'Product Category', 'Quantity', 'Price per Unit']
target = 'Total Amount'

X = sd[features]
y = sd[target]

#Split into train/test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#Preprocessing and Linear Regression pipeline
numeric_features = ['Age', 'Quantity', 'Price per Unit']
categorical_features = ['Gender', 'Product Category']

preprocessor = ColumnTransformer([
    ('num', StandardScaler(), numeric_features),
    ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
])

pipeline = Pipeline([
    ('preprocessor', preprocessor),
    ('regressor', LinearRegression())
])

# Train the model
pipeline.fit(X_train, y_train)

# Step 5: Model evaluation
y_pred = pipeline.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R² Score: {r2:.2f}")

# Step 6: Visualization - Actual vs Predicted with 45° line
plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', label='45° reference line')
plt.xlabel('Actual Total Amount')
plt.ylabel('Predicted Total Amount')
plt.title('Actual vs Predicted Total Amount')
plt.legend()
plt.show()